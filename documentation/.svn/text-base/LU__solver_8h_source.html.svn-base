<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>UKFTractography: LU_solver.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javaScript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Generated by Doxygen 1.7.1 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>LU_solver.h</h1>  </div>
</div>
<div class="contents">
<a href="LU__solver_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef LU_solver_h</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define LU_solver_h</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#define TINY 1.0e-20</span>
<a name="l00011"></a>00011 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="keyword">namespace </span>LU_Solver {
<a name="l00030"></a>00030 
<a name="l00038"></a><a class="code" href="namespaceLU__Solver.html#a1689b4cd8fb2c7b655195595db6d4e42">00038</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceLU__Solver.html#a1689b4cd8fb2c7b655195595db6d4e42">LUdecmpDoolittle</a>(<span class="keywordtype">double</span> *A, <span class="keywordtype">int</span> n)
<a name="l00039"></a>00039   {
<a name="l00040"></a>00040     <span class="keywordtype">int</span> i, j, k, l;
<a name="l00041"></a>00041     <span class="keywordtype">double</span> *pK, *pRow, *pCol;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043     <span class="keywordflow">for</span> (k = 0, pK = A; k &lt; n; pK += n, k++) {
<a name="l00044"></a>00044       <span class="keywordflow">for</span> (j = k; j &lt; n; j++) {
<a name="l00045"></a>00045         <span class="keywordflow">for</span> (l = 0, pCol = A; l &lt; k; pCol += n,  l++)
<a name="l00046"></a>00046           * (pK + j) -= *(pK + l) * *(pCol + j);
<a name="l00047"></a>00047       }
<a name="l00048"></a>00048       <span class="keywordflow">if</span> ( *(pK + k) == 0.0 ) <span class="keywordflow">return</span> -1; <span class="comment">// make sure is non-singular</span>
<a name="l00049"></a>00049       <span class="keywordflow">for</span> (i = k + 1, pRow = pK + n; i &lt; n; pRow += n, i++) {
<a name="l00050"></a>00050         <span class="keywordflow">for</span> (l = 0, pCol = A; l &lt; k; pCol += n, l++)
<a name="l00051"></a>00051           * (pRow + k) -= *(pRow + l) * *(pCol + k);
<a name="l00052"></a>00052         *(pRow + k) /= *(pK + k);
<a name="l00053"></a>00053       }
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055     <span class="keywordflow">return</span> 0;
<a name="l00056"></a>00056   }
<a name="l00057"></a>00057 
<a name="l00068"></a><a class="code" href="namespaceLU__Solver.html#ad36907c73a6362a0f8b559558ab2d028">00068</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceLU__Solver.html#ad36907c73a6362a0f8b559558ab2d028">LUsolveDoolittle</a>(<span class="keywordtype">double</span> *LU, <span class="keywordtype">double</span> *X , <span class="keywordtype">int</span> nRows, <span class="keywordtype">int</span> nCols)
<a name="l00069"></a>00069   {
<a name="l00070"></a>00070     <span class="keywordtype">int</span> i, j, k;
<a name="l00071"></a>00071     <span class="keywordtype">int</span> iRows, iCols;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     <span class="keywordflow">for</span> (i = 0; i &lt; nRows; i++) {
<a name="l00074"></a>00074       <span class="keywordflow">for</span> (j = 0; j &lt; nCols; j++) {
<a name="l00075"></a>00075         iRows = i * nRows;
<a name="l00076"></a>00076         iCols = i * nCols;
<a name="l00077"></a>00077         <span class="keywordflow">if</span> (*(LU + iCols + j) == 0.0) <span class="keywordflow">return</span> -1; <span class="comment">// cannot have singular matrix</span>
<a name="l00078"></a>00078         <span class="keywordflow">for</span> (k = 0; k &lt; i; k++)
<a name="l00079"></a>00079           *(X + iCols + j) -= *(LU + iRows + k) * *(X + k * nCols + j);
<a name="l00080"></a>00080       }
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082     <span class="keywordflow">for</span> (i = nRows - 1; i &gt;= 0; i--) {
<a name="l00083"></a>00083       <span class="keywordflow">for</span> (j = nCols - 1; j &gt;= 0; j--) {
<a name="l00084"></a>00084         iRows = i * nRows;
<a name="l00085"></a>00085         iCols = i * nCols;
<a name="l00086"></a>00086         <span class="keywordflow">for</span> (k = nRows - 1; k &gt; i; k--)
<a name="l00087"></a>00087           *(X + iCols + j) -= *(LU + iRows + k)* *(X + k * nCols + j);
<a name="l00088"></a>00088         *(X + iCols + j) /= *(LU + iRows + i);
<a name="l00089"></a>00089       }
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091     <span class="keywordflow">return</span> 0;
<a name="l00092"></a>00092   }
<a name="l00093"></a>00093 
<a name="l00103"></a><a class="code" href="namespaceLU__Solver.html#a0b7798232733973c7d39ffeea5ec3f9a">00103</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceLU__Solver.html#a0b7798232733973c7d39ffeea5ec3f9a">LUdecmpCrout</a>(<span class="keywordtype">double</span> * A, <span class="keywordtype">int</span> n, <span class="keywordtype">int</span> * indx)
<a name="l00104"></a>00104   {
<a name="l00105"></a>00105     <span class="keywordtype">int</span> i;
<a name="l00106"></a>00106     <span class="keywordtype">int</span> imax = 0;
<a name="l00107"></a>00107     <span class="keywordtype">int</span> j, k;
<a name="l00108"></a>00108     <span class="keywordtype">double</span> big = 0;
<a name="l00109"></a>00109     <span class="keywordtype">double</span> dum, sum, temp;
<a name="l00110"></a>00110     std::vector&lt;double&gt; vv(n);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="keywordflow">for</span> (i = 0; i &lt; n; i++)
<a name="l00113"></a>00113       *(indx + i) = i;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="keywordflow">for</span> (i = 0; i &lt; n; i++) {
<a name="l00116"></a>00116       <span class="keywordflow">for</span> (j = 0; j &lt; n; j++)
<a name="l00117"></a>00117         <span class="keywordflow">if</span> ((temp = fabs(*(A + i * n + j))) &gt; big) big = temp;
<a name="l00118"></a>00118       <span class="keywordflow">if</span> (big == 0.0) <span class="keywordflow">return</span> -1;
<a name="l00119"></a>00119       vv[i] = 1.0 / big;
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121     <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
<a name="l00122"></a>00122       <span class="keywordflow">for</span> (i = 0; i &lt; j; i++) {
<a name="l00123"></a>00123         sum = *(A + i * n + j);
<a name="l00124"></a>00124         <span class="keywordflow">for</span> (k = 0; k &lt; i; k++) sum -= *(A + i * n + k)* *(A + k * n + j);
<a name="l00125"></a>00125         *(A + i * n + j) = sum;
<a name="l00126"></a>00126       }
<a name="l00127"></a>00127       big = 0.0;
<a name="l00128"></a>00128       <span class="keywordflow">for</span> (i = j; i &lt; n; i++) {
<a name="l00129"></a>00129         sum = *(A + i * n + j);
<a name="l00130"></a>00130         <span class="keywordflow">for</span> (k = 0; k &lt; j; k++)
<a name="l00131"></a>00131           sum -= *(A + i * n + k) * *(A + k * n + j);
<a name="l00132"></a>00132         *(A + i * n + j) = sum;
<a name="l00133"></a>00133         <span class="keywordflow">if</span> ( (dum = vv[i] * fabs(sum)) &gt;= big) {
<a name="l00134"></a>00134           big = dum;
<a name="l00135"></a>00135           imax = i;
<a name="l00136"></a>00136         }
<a name="l00137"></a>00137       }
<a name="l00138"></a>00138       <span class="keywordflow">if</span> (j != imax) {
<a name="l00139"></a>00139         <span class="keywordflow">for</span> (k = 0; k &lt; n; k++) {
<a name="l00140"></a>00140           dum = *(A + imax * n + k);
<a name="l00141"></a>00141           *(A + imax * n + k) = *(A + j * n + k);
<a name="l00142"></a>00142           *(A + j * n + k) = dum;
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         temp = *(indx + j);
<a name="l00146"></a>00146         *(indx + j) = *(indx + imax);
<a name="l00147"></a>00147         *(indx + imax) = temp;
<a name="l00148"></a>00148 
<a name="l00149"></a>00149         vv[imax] = vv[j];
<a name="l00150"></a>00150       }
<a name="l00151"></a>00151       <span class="keywordflow">if</span> (*(A + j * n + j) == 0.0) *(A + j * n + j) = TINY;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153       <span class="keywordflow">if</span> (j != n - 1) {
<a name="l00154"></a>00154         dum = 1.0 / *(A + j * n + j);
<a name="l00155"></a>00155         <span class="keywordflow">for</span> (i = j + 1; i &lt; n; i++) *(A + i * n + j) *= dum;
<a name="l00156"></a>00156       }
<a name="l00157"></a>00157     }
<a name="l00158"></a>00158     <span class="keywordflow">return</span> 0;
<a name="l00159"></a>00159   }
<a name="l00160"></a>00160 
<a name="l00172"></a><a class="code" href="namespaceLU__Solver.html#a84b59080ad29ee6742d30921be62217b">00172</a>   <span class="keywordtype">int</span> <a class="code" href="namespaceLU__Solver.html#a84b59080ad29ee6742d30921be62217b">LUsolveCrout</a>(<span class="keywordtype">double</span> *LU, <span class="keywordtype">double</span> *B, <span class="keywordtype">double</span> *X, <span class="keywordtype">int</span> nRows, <span class="keywordtype">int</span> nCols, <span class="keywordtype">int</span> *order)
<a name="l00173"></a>00173   {
<a name="l00174"></a>00174     <span class="keywordtype">int</span> i, j, k;
<a name="l00175"></a>00175     <span class="keywordtype">int</span> iRows, iCols;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     <span class="keywordflow">for</span> (i = 0; i &lt; nRows; i++) {
<a name="l00178"></a>00178       <span class="keywordflow">for</span> (j = 0; j &lt; nCols; j++) {
<a name="l00179"></a>00179         iRows = i * nRows;
<a name="l00180"></a>00180         iCols = i * nCols;
<a name="l00181"></a>00181         <span class="keywordflow">if</span> (*(LU + iRows + i) == 0.0)
<a name="l00182"></a>00182           <span class="keywordflow">return</span> -1; <span class="comment">// i don&#39;t like singular matrices</span>
<a name="l00183"></a>00183         *(X + iCols + j) = *(B + * (order + i) * nCols + j);
<a name="l00184"></a>00184 
<a name="l00185"></a>00185         <span class="keywordflow">for</span> (k = 0; k &lt; i; k++)
<a name="l00186"></a>00186           *(X + iCols + j) -= *(LU + iRows + k) * *(X + k * nCols + j);
<a name="l00187"></a>00187       }
<a name="l00188"></a>00188     }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     <span class="keywordflow">for</span> (i = nRows - 1; i &gt;= 0; i--) {
<a name="l00191"></a>00191       <span class="keywordflow">for</span> (j = nCols - 1; j &gt;= 0; j--) {
<a name="l00192"></a>00192         iRows = i * nRows;
<a name="l00193"></a>00193         iCols = i * nCols;
<a name="l00194"></a>00194         <span class="keywordflow">for</span> (k = nRows - 1; k &gt; i; k--)
<a name="l00195"></a>00195           *(X + iCols + j) -= *(LU + iRows + k)* *(X + k * nCols + j);
<a name="l00196"></a>00196         *(X + iCols + j) /= *(LU + iRows + i);
<a name="l00197"></a>00197       }
<a name="l00198"></a>00198     }
<a name="l00199"></a>00199     <span class="keywordflow">return</span> 0;
<a name="l00200"></a>00200   }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 }
<a name="l00203"></a>00203 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&nbsp;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&nbsp;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&nbsp;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&nbsp;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&nbsp;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&nbsp;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&nbsp;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&nbsp;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&nbsp;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Generated on Fri Mar 16 2012 13:27:37 for UKFTractography by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
